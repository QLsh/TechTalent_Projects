USE Payroll;
-- Below is a list of analysis you could do with your database, pick some of your choice: 
-- • Salary Analysis
-- • Employee demographics
-- • Overtime analysis
-- • Department analysis
-- • Employee turnover
--
-- • Salary Analysis:
-- 1. Calculate average, minimum, and maximum salaries(fetch the min, max, and average salary)
SELECT AVG(TOTAL_PAY), MIN(TOTAL_PAY), MAX(TOTAL_PAY)
	FROM PAYMENT;
    
-- 2. Identify the highest-paid and lowest-paid employees (fetch the salary along as the employee
-- concerned and their job title)
SELECT FULL_NAME, TOTAL_PAY, GENDER, ETHNICITY,JOB_TITLE
	FROM PAYMENT 
    JOIN EMPLOYEE ON PAYMENT.RECORD_ID = EMPLOYEE.RECORD_ID
    JOIN JOB ON JOB.RECORD_ID = EMPLOYEE.RECORD_ID
    WHERE TOTAL_PAY >= ALL(SELECT TOTAL_PAY FROM PAYMENT)
		OR TOTAL_PAY <= ALL(SELECT TOTAL_PAY FROM PAYMENT);
        
-- 3. Determine the salary distribution across different departments or job titles (you can use the GROUP
-- BY method on a Salary field column for this along with a math aggregation function)
SELECT DEPARTMENT_NO, DEPARTMENT_TITLE, AVG(TOTAL_PAY)
	FROM PAYMENT
    JOIN DEPARTMENT ON PAYMENT.RECORD_ID = DEPARTMENT.RECORD_ID
GROUP BY DEPARTMENT_NO,DEPARTMENT_TITLE
ORDER BY AVG(TOTAL_PAY);

-- Also ordered by ascending order for the average payment for each department.
-- 4. Analyse salary trends over time (you can use the GROUP BY on a YEAR column field method for this
SELECT PAY_YEAR, AVG(TOTAL_PAY)
	FROM PAYMENT
    JOIN EMPLOYEE ON PAYMENT.RECORD_ID = EMPLOYEE.RECORD_ID
GROUP BY PAY_YEAR;

-- • Employee demographics:
-- 1. Explore the distribution of employees by gender, age, or ethnicity (use a Group by and an
-- aggregation math function)
SELECT GENDER, COUNT(DISTINCT FULL_NAME)
	FROM EMPLOYEE
GROUP BY GENDER;

SELECT ETHNICITY, COUNT(DISTINCT FULL_NAME)
	FROM EMPLOYEE
GROUP BY ETHNICITY;

-- 2. Identify the departments or job titles with the highest diversity (Use a Count function to count the
-- ethnicity and a Group by method on the department title, you might want to sort your data as well)
SELECT DEPARTMENT_NO, DEPARTMENT_TITLE, COUNT(ETHNICITY)
	FROM DEPARTMENT
    JOIN EMPLOYEE ON DEPARTMENT.RECORD_ID = EMPLOYEE.RECORD_ID
GROUP BY DEPARTMENT_NO, DEPARTMENT_TITLE
ORDER BY COUNT(ETHNICITY) DESC;

SELECT JOB_TITLE, COUNT(ETHNICITY)
	FROM JOB
    JOIN EMPLOYEE ON JOB.RECORD_ID = EMPLOYEE.RECORD_ID
GROUP BY JOB_TITLE
ORDER BY COUNT(ETHNICITY) DESC;

-- • Overtime analysis:
-- 1. Identify employees with the highest amount of overtime_payment
SELECT FULL_NAME, OVERTIME_PAY, GENDER, ETHNICITY,JOB_TITLE
	FROM PAYMENT 
    JOIN EMPLOYEE ON PAYMENT.RECORD_ID = EMPLOYEE.RECORD_ID
    JOIN JOB ON JOB.RECORD_ID = EMPLOYEE.RECORD_ID
    WHERE OVERTIME_PAY >= ALL(SELECT OVERTIME_PAY FROM PAYMENT);

-- • Department analysis:
-- 1. Compare the budget allocation across different departments
SELECT DEPARTMENT_NO, DEPARTMENT_TITLE, SUM(TOTAL_PAY+BENEFIT_PAY+CITY_RETIREMENT_CONTRIBUTIONS) AS BUDGET
	FROM PAYMENT
	JOIN DEPARTMENT ON DEPARTMENT. RECORD_ID = PAYMENT. RECORD_ID
    JOIN WELFARE ON WELFARE. RECORD_ID = PAYMENT. RECORD_ID
GROUP BY DEPARTMENT_NO, DEPARTMENT_TITLE
ORDER BY BUDGET DESC;

-- 2. Analyse the number of employees, total salaries, and benefits by department
SELECT DEPARTMENT_NO, DEPARTMENT_TITLE, COUNT(DISTINCT EMPLOYEE.FULL_NAME) AS NUMBER_OF_EMPLOYEES,SUM(TOTAL_PAY) AS TOTAL_SALARIES, SUM(BENEFIT_PAY) AS BENIFITS
	FROM PAYMENT
	JOIN DEPARTMENT ON DEPARTMENT. RECORD_ID = PAYMENT. RECORD_ID
    JOIN WELFARE ON WELFARE. RECORD_ID = PAYMENT. RECORD_ID
    JOIN EMPLOYEE ON EMPLOYEE. RECORD_ID = PAYMENT. RECORD_ID
GROUP BY DEPARTMENT_NO, DEPARTMENT_TITLE;

-- 3. Identify departments with the highest and lowest cost per employee
(SELECT ROW_NUMBER() OVER(ORDER BY SUM(TOTAL_PAY+BENEFIT_PAY+CITY_RETIREMENT_CONTRIBUTIONS)/COUNT(DISTINCT EMPLOYEE.FULL_NAME)) as ROW_ID,
    DEPARTMENT_NO, DEPARTMENT_TITLE, SUM(TOTAL_PAY+BENEFIT_PAY+CITY_RETIREMENT_CONTRIBUTIONS)/COUNT(DISTINCT EMPLOYEE.FULL_NAME) as COST_PER_EMPLOYEE
	FROM PAYMENT
	JOIN DEPARTMENT ON DEPARTMENT. RECORD_ID = PAYMENT. RECORD_ID
    JOIN WELFARE ON WELFARE. RECORD_ID = PAYMENT. RECORD_ID
    JOIN EMPLOYEE ON EMPLOYEE. RECORD_ID = PAYMENT. RECORD_ID
GROUP BY DEPARTMENT_NO, DEPARTMENT_TITLE
ORDER BY COST_PER_EMPLOYEE
LIMIT 1)
UNION
(SELECT ROW_NUMBER() OVER(ORDER BY SUM(TOTAL_PAY+BENEFIT_PAY+CITY_RETIREMENT_CONTRIBUTIONS)/COUNT(DISTINCT EMPLOYEE.FULL_NAME)) as ROW_ID,
    DEPARTMENT_NO, DEPARTMENT_TITLE, SUM(TOTAL_PAY+BENEFIT_PAY+CITY_RETIREMENT_CONTRIBUTIONS)/COUNT(DISTINCT EMPLOYEE.FULL_NAME) as COST_PER_EMPLOYEE
	FROM PAYMENT
	JOIN DEPARTMENT ON DEPARTMENT. RECORD_ID = PAYMENT. RECORD_ID
    JOIN WELFARE ON WELFARE. RECORD_ID = PAYMENT. RECORD_ID
    JOIN EMPLOYEE ON EMPLOYEE. RECORD_ID = PAYMENT. RECORD_ID
GROUP BY DEPARTMENT_NO, DEPARTMENT_TITLE
ORDER BY COST_PER_EMPLOYEE DESC
LIMIT 1);


-- • Employee turnover:
-- 1. Analyse employee turnover rates
-- Turnover rate = [(# of employees who left) / (# of employees at the beginning + # of employees at the end)] x 100
--  Calculate turnove rate for 2017-2023
DROP TABLE TURNOVER;
CREATE TABLE TURNOVER(
	PAY_YEAR INT NOT NULL,
	NO_EMPLOYEE_LEFT DECIMAL NOT NULL,
    NO_EMPLOYEE_AT_B_F DECIMAL NOT NULL
);

-- 2017-2018 TURNOVER-RATE
INSERT INTO TURNOVER
SELECT PAY_YEAR, 
	COUNT(DISTINCT FULL_NAME),	
    (SELECT COUNT(DISTINCT FULL_NAME)
		FROM EMPLOYEE
		GROUP BY PAY_YEAR
		HAVING PAY_YEAR = '2017'
)
+
	(SELECT COUNT(DISTINCT FULL_NAME)
		FROM EMPLOYEE
		GROUP BY PAY_YEAR
		HAVING PAY_YEAR = '2018'
)
	FROM EMPLOYEE
	WHERE PAY_YEAR ='2017'
		AND FULL_NAME NOT IN (SELECT FULL_NAME
	FROM EMPLOYEE
	WHERE PAY_YEAR = '2018'
);

-- 2018-2019 TURNOVER RATE
INSERT INTO TURNOVER
SELECT PAY_YEAR, 
	COUNT(DISTINCT FULL_NAME),	
    (SELECT COUNT(DISTINCT FULL_NAME)
		FROM EMPLOYEE
		GROUP BY PAY_YEAR
		HAVING PAY_YEAR = '2018'
)
+
	(SELECT COUNT(DISTINCT FULL_NAME)
		FROM EMPLOYEE
		GROUP BY PAY_YEAR
		HAVING PAY_YEAR = '2019'
)
	FROM EMPLOYEE
	WHERE PAY_YEAR ='2018'
		AND FULL_NAME NOT IN (SELECT FULL_NAME
	FROM EMPLOYEE
	WHERE PAY_YEAR = '2019'
);

-- 2019-2020 TURNOVER RATE
INSERT INTO TURNOVER
SELECT PAY_YEAR, 
	COUNT(DISTINCT FULL_NAME),	
    (SELECT COUNT(DISTINCT FULL_NAME)
		FROM EMPLOYEE
		GROUP BY PAY_YEAR
		HAVING PAY_YEAR = '2019'
)
+
	(SELECT COUNT(DISTINCT FULL_NAME)
		FROM EMPLOYEE
		GROUP BY PAY_YEAR
		HAVING PAY_YEAR = '2020'
)
	FROM EMPLOYEE
	WHERE PAY_YEAR ='2019'
		AND FULL_NAME NOT IN (SELECT FULL_NAME
	FROM EMPLOYEE
	WHERE PAY_YEAR = '2020'
);

-- 2020-2021 TURNOVER RATE
INSERT INTO TURNOVER
SELECT PAY_YEAR, 
	COUNT(DISTINCT FULL_NAME),	
    (SELECT COUNT(DISTINCT FULL_NAME)
		FROM EMPLOYEE
		GROUP BY PAY_YEAR
		HAVING PAY_YEAR = '2020'
)
+
	(SELECT COUNT(DISTINCT FULL_NAME)
		FROM EMPLOYEE
		GROUP BY PAY_YEAR
		HAVING PAY_YEAR = '2021'
)
	FROM EMPLOYEE
	WHERE PAY_YEAR ='2020'
		AND FULL_NAME NOT IN (SELECT FULL_NAME
	FROM EMPLOYEE
	WHERE PAY_YEAR = '2021'
);

-- 2021-2022 TURNOVER RATE
INSERT INTO TURNOVER
SELECT PAY_YEAR, 
	COUNT(DISTINCT FULL_NAME),	
    (SELECT COUNT(DISTINCT FULL_NAME)
		FROM EMPLOYEE
		GROUP BY PAY_YEAR
		HAVING PAY_YEAR = '2021'
)
+
	(SELECT COUNT(DISTINCT FULL_NAME)
		FROM EMPLOYEE
		GROUP BY PAY_YEAR
		HAVING PAY_YEAR = '2022'
)
	FROM EMPLOYEE
	WHERE PAY_YEAR ='2021'
		AND FULL_NAME NOT IN (SELECT FULL_NAME
	FROM EMPLOYEE
	WHERE PAY_YEAR = '2022'
);

-- 2022-2023 TURNOVER RATE
INSERT INTO TURNOVER
SELECT PAY_YEAR, 
	COUNT(DISTINCT FULL_NAME),	
    (SELECT COUNT(DISTINCT FULL_NAME)
		FROM EMPLOYEE
		GROUP BY PAY_YEAR
		HAVING PAY_YEAR = '2022'
)
+
	(SELECT COUNT(DISTINCT FULL_NAME)
		FROM EMPLOYEE
		GROUP BY PAY_YEAR
		HAVING PAY_YEAR = '2023'
)
	FROM EMPLOYEE
	WHERE PAY_YEAR ='2022'
		AND FULL_NAME NOT IN (SELECT FULL_NAME
	FROM EMPLOYEE
	WHERE PAY_YEAR = '2023'
);

ALTER TABLE TURNOVER ADD TURNOVER_RATE VARCHAR(102) AS (CONCAT((NO_EMPLOYEE_LEFT/NO_EMPLOYEE_AT_B_F)*100,'%'));

SELECT * FROM TURNOVER;